package GUI;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


 import java.io.BufferedReader;
 import java.io.FileNotFoundException;
 import java.io.FileReader;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
 /**
  *
  * @author Auralea A S
  */
 public class InputFrame extends javax.swing.JFrame {
 
     /**
      * Creates new form InputFrame
      */
     public InputFrame() {
         initComponents();
     }
 
     /**
      * This method is called from within the constructor to initialize the form.
      * WARNING: Do NOT modify this code. The content of this method is always
      * regenerated by the Form Editor.
      */
    //  @SuppressWarnings("unchecked")
     // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
     private void initComponents() {
 
         enterStartWord = new javax.swing.JLabel();
         startWord = new javax.swing.JTextField();
         enterEndWord = new javax.swing.JLabel();
         endWord = new javax.swing.JTextField();
         jLabel1 = new javax.swing.JLabel();
         btnUCS = new javax.swing.JButton();
         btnGreedy = new javax.swing.JButton();
         btnAstar = new javax.swing.JButton();
         jScrollPane2 = new javax.swing.JScrollPane();
         resultArea = new javax.swing.JTextArea();
         resultLabel = new javax.swing.JLabel();
         btnClear = new javax.swing.JButton();
         jPanel1 = new javax.swing.JPanel();
         jLabel2 = new javax.swing.JLabel();
 
         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
 
         enterStartWord.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
         enterStartWord.setText("Enter Start Word:");
 
         enterEndWord.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
         enterEndWord.setText("Enter End Word:");
 
         jLabel1.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 14)); // NOI18N
         jLabel1.setText("Choose Algorithm:");
 
         btnUCS.setText("Uniform Cost Search");
         btnUCS.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 btnUCSActionPerformed(evt);
             }
         });
 
         btnGreedy.setText("Greedy Best-first Search");
         btnGreedy.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 btnGreedyActionPerformed(evt);
             }
         });
 
         btnAstar.setText("A*");
         btnAstar.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 btnAstarActionPerformed(evt);
             }
         });
 
         resultArea.setColumns(20);
         resultArea.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 12)); // NOI18N
         resultArea.setRows(5);
         jScrollPane2.setViewportView(resultArea);
 
         resultLabel.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
         resultLabel.setText("RESULT");
 
         btnClear.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
         btnClear.setText("CLEAR");
         btnClear.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 btnClearActionPerformed(evt);
             }
         });
 
         jPanel1.setBackground(new java.awt.Color(164, 207, 185));
 
         jLabel2.setFont(new java.awt.Font("Nirmala UI", 1, 20)); // NOI18N
         jLabel2.setForeground(new java.awt.Color(255, 255, 255));
         jLabel2.setText("Word Ladder Solver");
 
         javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
         jPanel1.setLayout(jPanel1Layout);
         jPanel1Layout.setHorizontalGroup(
             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                 .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                 .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                 .addGap(137, 137, 137))
         );
         jPanel1Layout.setVerticalGroup(
             jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addGroup(jPanel1Layout.createSequentialGroup()
                 .addGap(17, 17, 17)
                 .addComponent(jLabel2)
                 .addContainerGap(22, Short.MAX_VALUE))
         );
 
         javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
         getContentPane().setLayout(layout);
         layout.setHorizontalGroup(
             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addGroup(layout.createSequentialGroup()
                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                         .addGap(38, 38, 38)
                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                             .addComponent(enterEndWord, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                             .addComponent(enterStartWord, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                             .addComponent(startWord)
                             .addComponent(endWord, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                             .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                             .addGroup(layout.createSequentialGroup()
                                 .addComponent(btnUCS)
                                 .addGap(18, 18, 18)
                                 .addComponent(btnGreedy)
                                 .addGap(18, 18, 18)
                                 .addComponent(btnAstar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                             .addComponent(jScrollPane2)))
                     .addGroup(layout.createSequentialGroup()
                         .addGap(242, 242, 242)
                         .addComponent(resultLabel))
                     .addGroup(layout.createSequentialGroup()
                         .addGap(222, 222, 222)
                         .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                 .addContainerGap(45, Short.MAX_VALUE))
             .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
         );
         layout.setVerticalGroup(
             layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
             .addGroup(layout.createSequentialGroup()
                 .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                 .addGap(18, 18, 18)
                 .addComponent(enterStartWord, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                 .addComponent(startWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                 .addGap(18, 18, 18)
                 .addComponent(enterEndWord)
                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                 .addComponent(endWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                 .addGap(26, 26, 26)
                 .addComponent(jLabel1)
                 .addGap(18, 18, 18)
                 .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(btnUCS)
                     .addComponent(btnGreedy)
                     .addComponent(btnAstar))
                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                 .addComponent(resultLabel)
                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                 .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                 .addGap(18, 18, 18)
                 .addComponent(btnClear)
                 .addGap(23, 23, 23))
         );
 
         pack();
     }// </editor-fold>                        
 
 
     
     private void btnUCSActionPerformed(java.awt.event.ActionEvent evt) {                                       
         String inStartWord = startWord.getText().trim();
         String inEndWord = endWord.getText().trim();

         if (inEndWord.split(" ").length > 1 || inStartWord.split(" ").length > 1) {
            resultArea.setText("Error! Start word and end word must contain only one word.");
            return;
         }

         // Validate start word and end word
         if (!inStartWord.matches("[a-zA-Z]+") || !inEndWord.matches("[a-zA-Z]+")) {
             resultArea.setText("Error! Start word and end word must contain only alphabetical characters and cannot be empty.");
             return;
         }
         

         // Validate start word and end word lengths
         if (inStartWord.length() != inEndWord.length()) {
             resultArea.setText("Error! Start word and end word should have the same character length");
             return;
         }



         List<String> wordList = new ArrayList<>();
         // Populate wordList from a file or any other source
         try (BufferedReader br = new BufferedReader(new FileReader("dict.txt"))) {
             String line;
             while ((line = br.readLine()) != null) {
                 wordList.add(line.trim());
             }
             resultArea.setText(wordList.get(5));
         } catch (FileNotFoundException e) {
             e.printStackTrace();
             System.err.println("File not found: " + e.getMessage());
         } catch (IOException e) {
             e.printStackTrace();
             System.err.println("Error reading file: " + e.getMessage());
         }

         if (!wordList.contains(inEndWord)) {
            resultArea.setText("Error! End word is not in the word list.");
            return;
         }
 
         // Call the UCS algorithm
         long startTime = System.nanoTime();
         Pair<List<String>, Integer> result = UniformCostSearch.uniformCostSearch(inStartWord, inEndWord, wordList);
         long endTime = System.nanoTime();
         long duration = (endTime - startTime) / 1000000;
         
         // Display the result
         if (!result.getKey().isEmpty()) {
         resultArea.setText("Path from " + inStartWord + " to " + inEndWord + ": " + result.getKey() + "\n"
                 + "Number of nodes visited: " + result.getValue() + "\n"
                 + "Execution time: " + duration + " milliseconds");
         } else {
             resultArea.setText("NO PATH FOUND from " + inStartWord + " to " + inEndWord + " !! \n"
                    + "Number of nodes visited: " + result.getValue() + "\n"
                    + "Execution time: " + duration + " milliseconds");
         }
     }                                      
 
     private void btnAstarActionPerformed(java.awt.event.ActionEvent evt) {                                         
         String inStartWord = startWord.getText().trim();
         String inEndWord = endWord.getText().trim();
 
         List<String> wordList = new ArrayList<>();
         // Populate wordList from a file or any other source
         try (BufferedReader br = new BufferedReader(new FileReader("dict.txt"))) {
             String line;
             while ((line = br.readLine()) != null) {
                 wordList.add(line.trim());
             }
             resultArea.setText(wordList.get(5));
         } catch (FileNotFoundException e) {
             e.printStackTrace();
             System.err.println("File not found: " + e.getMessage());
         } catch (IOException e) {
             e.printStackTrace();
             System.err.println("Error reading file: " + e.getMessage());
         }
 
 
         // Call the UCS algorithm
         long startTime = System.nanoTime();
         Pair<List<String>, Integer> result = AStarSearch.aStarSearch(inStartWord, inEndWord, wordList);
         long endTime = System.nanoTime();
         long duration = (endTime - startTime) / 1000000;
         
         // Display the result
         if (!result.getKey().isEmpty()) {
         resultArea.setText("Path from " + inStartWord + " to " + inEndWord + ": " + result.getKey() + "\n"
                 + "Number of nodes visited: " + result.getValue() + "\n"
                 + "Execution time: " + duration + " milliseconds");
         } else {
             resultArea.setText("NO PATH FOUND from " + inStartWord + " to " + inEndWord + " !! \n"
                    + "Number of nodes visited: " + result.getValue() + "\n"
                    + "Execution time: " + duration + " milliseconds");
         }
     }                                        
 
     private void btnGreedyActionPerformed(java.awt.event.ActionEvent evt) {                                          
         String inStartWord = startWord.getText().trim();
         String inEndWord = endWord.getText().trim();
 
         List<String> wordList = new ArrayList<>();
         // Populate wordList from a file or any other source
         try (BufferedReader br = new BufferedReader(new FileReader("dict.txt"))) {
             String line;
             while ((line = br.readLine()) != null) {
                 wordList.add(line.trim());
             }
             resultArea.setText(wordList.get(5));
         } catch (FileNotFoundException e) {
             e.printStackTrace();
             System.err.println("File not found: " + e.getMessage());
         } catch (IOException e) {
             e.printStackTrace();
             System.err.println("Error reading file: " + e.getMessage());
         }
 
 
         // Call the UCS algorithm
         long startTime = System.nanoTime();
         Pair<List<String>, Integer> result = GreedyBestFirstSearch.greedyBestFirstSearch(inStartWord, inEndWord, wordList);
         long endTime = System.nanoTime();
         long duration = (endTime - startTime) / 1000000;
         
         // Display the result
         if (!result.getKey().isEmpty()) {
         resultArea.setText("Path from " + inStartWord + " to " + inEndWord + ": " + result.getKey() + "\n"
                 + "Number of nodes visited: " + result.getValue() + "\n"
                 + "Execution time: " + duration + " milliseconds");
         } else {
             resultArea.setText("NO PATH FOUND from " + inStartWord + " to " + inEndWord + " !! \n"
                     + "Number of nodes visited: " + result.getValue() + "\n"
                     + "Execution time: " + duration + " milliseconds");
         }
     }                                         
 
     private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {                                         
         startWord.setText("");
         endWord.setText("");
         resultArea.setText("");
     }                                        
 
     /**
      * @param args the command line arguments
      */
     public static void main(String args[]) {
 
         /* Create and display the form */
         java.awt.EventQueue.invokeLater(new Runnable() {
             public void run() {
                 new InputFrame().setVisible(true);
             }
         });
     }
 
     // Variables declaration - do not modify                     
     private javax.swing.JButton btnAstar;
     private javax.swing.JButton btnClear;
     private javax.swing.JButton btnGreedy;
     private javax.swing.JButton btnUCS;
     private javax.swing.JTextField endWord;
     private javax.swing.JLabel enterEndWord;
     private javax.swing.JLabel enterStartWord;
     private javax.swing.JLabel jLabel1;
     private javax.swing.JLabel jLabel2;
     private javax.swing.JPanel jPanel1;
     private javax.swing.JScrollPane jScrollPane2;
     private javax.swing.JTextArea resultArea;
     private javax.swing.JLabel resultLabel;
     private javax.swing.JTextField startWord;
     // End of variables declaration                   
 } 